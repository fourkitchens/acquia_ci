#!/bin/bash

# Exit on error
set -e

echo "Updating projects"
DIR=$(pwd)
COMPOSER_CMD=$(which composer)
NOW=$(date +'%F')
cd $DIR
BRANCH_NAME="feature/automated-sec-update-$NOW"
# Check if branch already exists
echo "Checking if branch exists"
if [[ `git ls-remote --head origin $BRANCH_NAME` ]]; then
  # Branch already exists
  while getopts ":y" option; do
    case $option in
      y)
      echo "Switching to existing security update branch"
      echo "Any changes will be appended"
      git checkout $BRANCH_NAME
      CHECKOUT_BRANCH=true
      ;;
    esac
  done
else
  # Branch does not yet exist
  echo "Create security update branch for $NOW"
  echo "--------------------------------------"
  cd $DIR
  git branch $BRANCH_NAME
  CHECKOUT_BRANCH=true
fi

if [[ $CHECKOUT_BRANCH == true ]]; then
  echo "Checkout security update branch"
  git checkout $BRANCH_NAME
else
  echo "Branch already exists"
  exit 1
fi

MESSAGE=""
SEPARATOR="\n"
while read -r line
do
  PROJECT=$(echo $line | sed -e 's/\r//g')
  echo "Updating $PROJECT"
  echo "-----------------"
  cd $DIR
  $COMPOSER_CMD update $PROJECT --with-dependencies
  # Check for any changes
  if [[ `git status --porcelain` ]]; then
    #committing recent changes.
    git add composer.*
    git commit -m "(AUTO-SEC): Updated project $PROJECT (Security update)"

    # Building PR information.
    # Remove prefix "drupal/" from the project name
    AUX=${PROJECT//drupal\//''}
    if [ $AUX == 'core' ]; then
      AUX="- Update [${PROJECT}](https://www.drupal.org/project/drupal/releases)."
    else
      AUX="- Update the contrib module: [${PROJECT}](https://www.drupal.org/project/${AUX}/releases)."
    fi
    MESSAGE="${MESSAGE}${SEPARATOR}${AUX}"
    echo "Updated $PROJECT"
    echo "---------------"
  fi
done
echo "Projects updated"
echo "---------------"

# Check for any changes
cd $DIR
echo "Pushing security update changes to remote repo"
echo "-------------------------------------------"
git push --set-upstream origin $BRANCH_NAME

# Create the PR
if [ -z "$MESSAGE" ]
then
  echo "Nothing to update."
else
  echo "Creating security updates Pull request."
  echo "-------------------------------------------"
  # Preparing variables
  TITLE="(AUTO-SEC): Security updates for $NOW"
  BODY=`cat ./vendor/fourkitchens/pots/scripts/security-updates/PULL_REQUEST_TEMPLATE.md`
  BODY=${BODY//\[UPDATED_MODULES\]/$MESSAGE}
  if [ ! -z "$SITE_NAME" ]; then
    BODY=${BODY//\[PROJECT_NAME\]/$SITE_NAME}
  fi
  PARAMETERS=$(printf '{"title":"%s","body":"%s","head":"%s","base":"%s"}' "$TITLE" "${BODY//$'\n'/\\n}" "$BRANCH_NAME" "$CIRCLE_BRANCH")

  # Running the request
  curl -o /dev/null -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer $GITHUB_TOKEN" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls \
  -d "$PARAMETERS"

  echo "Pull request: $TITLE successfully created."
  echo "-------------------------------------------"
fi
