#!/bin/bash

set -eo pipefail

# Allow CircleCI to forward any SSH Keys so the remote server can pull from git.
mkdir -p ~/.ssh
printf "Host *\nForwardAgent yes" >> ~/.ssh/config

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
if [[ -z "$DOCROOT" ]]; then
  DOCROOT=web
fi
if [[ -z "$DRUSH_CMD" ]]; then
  DRUSH_CMD='./vendor/bin/drush'
fi
if [[ -z "$SYNC_CONFIG" ]]; then
  SYNC_CONFIG="YES"
fi

# Check for an SSH command.
if [[ -z "$SSH_COMMAND_LIVE" ]]; then
  # Default to using `drush @self.$REMOTE_ENV_NAME`
  if $DRUSH_CMD sa "@self.$REMOTE_ENV_NAME"; then
    DRUSH_SITE_ALIAS=$REMOTE_ENV_NAME;
  # Default to using `drush @self.live`
  elif $DRUSH_CMD sa @self.live; then
    DRUSH_SITE_ALIAS="live";
    REMOTE_ENV_NAME="live"
  # Default to using `drush @self.prod`
  elif $DRUSH_CMD sa @self.prod; then
    DRUSH_SITE_ALIAS="prod";
    REMOTE_ENV_NAME="prod"
  fi

  SSH_COMMAND_LIVE="$DRUSH_CMD "@self.$DRUSH_SITE_ALIAS" ssh"

  # In some cases the webroot provided by drush is a symlink in a totally
  # different folder, so lets not clobber what ever someone set.
  if [[ -z "$REMOTE_PROJECT_ROOT" ]]; then
    REMOTE_PROJECT_ROOT= $DRUSH_CMD sa "@self.$DRUSH_SITE_ALIAS" --fields root | grep 'root:.*$' | sed "s/[[:space:]]*root\: \(.*\)\/$DOCROOT/\1/g"
  fi
  if [[ -z "$SSH_COMMAND_LIVE" ]]; then
    echo "You must define \$SSH_COMMAND_LIVE as an environment variable or provide a drush site alias for @self.live with ssh information."
    exit 1;
  fi
fi
if [[ -z "$REMOTE_PROJECT_ROOT" ]]; then
  echo "You must define \$REMOTE_PROJECT_ROOT as an environment variable or provide a drush site alias for @self.live with ssh information."
  exit 1;
fi
if [[ -z "$REMOTE_ENV_NAME" ]]; then
  REMOTE_ENV_NAME="live"
fi

if [[ -z "$DEPLOY_BRANCH" ]]; then
  DEPLOY_BRANCH="$CI_BRANCH"
fi

if [[ -z "$BACKUP_SCRIPT_PATH" ]]; then
  BACKUP_SCRIPT_PATH="$SCRIPT_DIR/remote/backup"
fi
if [[ -z "$DEPLOY_SCRIPT_PATH" ]]; then
  DEPLOY_SCRIPT_PATH="$SCRIPT_DIR/remote/remote_deploy"
fi
if [[ -z "$REMOTE_BACKUP_DIRECTORY" ]]; then
  REMOTE_BACKUP_DIRECTORY="$REMOTE_PROJECT_ROOT/backups"
fi

$SSH_COMMAND_LIVE "bash -s " < "$BACKUP_SCRIPT_PATH" "$REMOTE_ENV_NAME" "$REMOTE_PROJECT_ROOT" "$REMOTE_BACKUP_DIRECTORY" "$DRUSH_CMD";
$SSH_COMMAND_LIVE "bash -s " < "$DEPLOY_SCRIPT_PATH" "$REMOTE_ENV_NAME" "$REMOTE_PROJECT_ROOT" "$DEPLOY_BRANCH" "$DOCROOT" "$DRUSH_CMD" "$SYNC_CONFIG";
